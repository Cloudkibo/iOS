{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fswiss\fcharset0 Helvetica;\f2\fnil\fcharset0 Menlo-Regular;
\f3\fnil\fcharset0 Monaco;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red50\green50\blue50;\red170\green13\blue145;
\red92\green38\blue153;\red196\green26\blue22;\red0\green116\blue0;\red148\green6\blue75;\red50\green98\blue178;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww25400\viewh13480\viewkind0
\deftab720
\pard\pardeftab720\ri-10257\sl512\sa320\qj

\f0\b\fs48 \cf2 \expnd0\expndtw0\kerning0
CloudKibo (iOS) Design Document
\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\ri-10257\sl320\sa240\qj

\fs36 \cf0 \expnd0\expndtw0\kerning0
Application Delegate
\b0\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\ri-10257\sl360\slmult1\qj

\fs32 \cf0 \expnd0\expndtw0\kerning0
This class is responsible for setting up tasks for launching application, terminating application, running application in background, bringing application in foreground. This class connects the application to socket.io . Also it makes sure that we close our socket.io service before the application is terminated.It is also responsible for retrieving any data stored in device Key chains. For example, user\'92s login credentials are retrieved(if saved) when application is launched.
\fs28 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\ri-10257\sl360\slmult1\qj
\cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\ri-10257\sl512\sa320\qj

\b\fs36 \cf2 Database Handler
\b0\fs32 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\ri-10257\sl360\slmult1\qj
\cf2 We have this utility class which we use in all our application to store and retrieve data from local SQLite database of our application. It has separate functions to fetch data from each table. We also use functions to store data in table. We don\'92t deal with the database instance in all our application. We just create one database instance in this utility class and rest of the application invokes functions of this class to talk to database.\cf0 \expnd0\expndtw0\kerning0
\
\
\pard\pardeftab720\ri-10257\sl360\slmult1\qj

\b\fs36 \cf0 \expnd0\expndtw0\kerning0
Socket.io Component
\b0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\ri-10257\sl360\slmult1\qj

\fs32 \cf0 \expnd0\expndtw0\kerning0
These is a separate component which handles sockets. It has socket handlers. It has details of what to listen on socket. It has a separate function for emitting message on socket. This function can be accessed throughout application for emitting socket messages to CloudKibo Server. Socket delegates are defined for handling socket messages. Delegates are responsible for notifying whenever a socket message is received. Notification is sent to the class which ha implemented socket delegates. That class then take the action required based on type of socket message received.\
\
\pard\pardeftab720\ri-10257\sl512\qj

\b\fs40 \cf2 \expnd0\expndtw0\kerning0
Delegates/Protocols
\fs28 \ul \
\pard\pardeftab720\sl406

\f1\i\b0 \cf3 \expnd0\expndtw0\kerning0
\ulnone Delegation
\i0 \expnd0\expndtw0\kerning0
 is a design pattern that enables a class or structure to hand off (or 
\i \expnd0\expndtw0\kerning0
delegate
\i0 \expnd0\expndtw0\kerning0
) some of its responsibilities to an instance of another type.\
Here is an example delegate used in our application. This sample delegate defines protocols for receiving different types of Socket messages for WebRTC call:\
\pard\pardeftab720\sl406

\f2\fs22 \cf4 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\tx529\pardeftab529\pardirnatural
\cf4 protocol\cf0  SocketClientDelegateWebRTC:\cf4 class\cf0 \
\{\
    \cf4 func\cf0  socketReceivedMSGWebRTC(message:\cf5 String\cf0 ,data:\cf5 AnyObject\cf0 !);\
    \cf4 func\cf0  socketReceivedOtherWebRTC(message:\cf5 String\cf0 ,data:\cf5 AnyObject\cf0 !);\
    \cf4 func\cf0  socketReceivedMessageWebRTC(message:\cf5 String\cf0 ,data:\cf5 AnyObject\cf0 !);\
    \
    \
\}
\f0\fs32 \cf2 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
\pard\pardeftab720\ri-10257\sl360\slmult1\qj

\b \cf2 \expnd0\expndtw0\kerning0
\

\fs40 Push Notifications Service:
\fs32 \
\
\
\pard\pardeftab720\ri-10257\sl360\slmult1\qj

\fs36 \cf0 \expnd0\expndtw0\kerning0
Constants Class
\b0\fs24 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\ri-10257\sl360\slmult1\qj

\fs32 \cf0 \expnd0\expndtw0\kerning0
This class stores our REST API addresses values in constant variables which are accessible throughout application. These constants are refrenced in our application. This helps to maintain consistency. If there is any change in our URL or rest API, we will have to make changes in this file only. Below are details of REST API urls as stored in this class:\
\
\pard\pardeftab529\ri-10257\pardirnatural\qj

\f2\fs22 \cf4 \kerning1\expnd0\expndtw0 \CocoaLigature0 	static\cf0  \cf4 let\cf0  MainUrl=\cf6 "https://api.cloudkibo.com"\cf0 \
\
    \cf4 static\cf0  \cf4 let\cf0  authentictionUrl=\cf6 "/auth/local/"\cf0 \
    \cf4 static\cf0  \cf4 let\cf0  bringUserChat=\cf6 "/api/userchat/"\cf0 \
    \cf4 static\cf0  \cf4 let\cf0  getCurrentUser=\cf6 "/api/users/me"\cf0 \
    \cf4 static\cf0  \cf4 let\cf0  getContactsList=\cf6 "/api/contactslist/"\cf0 \
    \cf4 static\cf0  \cf4 let\cf0  room=\cf6 "globalchatroom"\cf0 \
    \
    \cf4 static\cf0  \cf4 let\cf0  addContactByUsername=\cf6 "/api/contactslist/addbyusername"\cf0 \
    \cf4 static\cf0  \cf4 let\cf0  addContactByEmail=\cf6 "/api/contactslist/addbyemail"\cf0 \
    \cf4 static\cf0  \cf4 let\cf0  markAsRead=\cf6 "/api/userchat/markasread"\cf0 \
    \cf4 static\cf0  \cf4 let\cf0  getSingleUserByID=\cf6 "/api/users/"\cf0  \cf7 //send if along\
\cf0     \cf4 static\cf0  \cf4 let\cf0  removeChatHistory=\cf6 "/api/userchat/removechathistory"\cf0 \
    \cf4 static\cf0  \cf4 let\cf0  removeFriend=\cf6 "/api/contactslist/removefriend"\cf0 \
    \cf4 static\cf0  \cf4 let\cf0  getPendingFriendRequestsContacts=\cf6 "/api/contactslist/pendingcontacts"\cf0 \
    \cf4 static\cf0  \cf4 let\cf0  rejectPendingFriendRequest=\cf6 "/api/contactslist/rejectfriendrequest"\cf0 \
    \cf4 static\cf0  \cf4 let\cf0  approvePendingFriendRequest=\cf6 "/api/contactslist/approvefriendrequest"\cf0 \
    \cf4 static\cf0  \cf4 let\cf0  createNewUser=\cf6 "/api/users/"
\f0\b\fs40 \cf2 \expnd0\expndtw0\kerning0
\ul \ulc2 \CocoaLigature1 \
\pard\pardeftab720\ri-10257\sl512\qj
\cf2 \
\
View Controllers
\b0\fs32 \ulnone \
Swift language works on Model View Controller(MVC) framework. Our application has View Controllers to show different screens of our application. Following diagram gives details of our main views:\
\
\pard\pardeftab720\ri-10257\pardirnatural\qj

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Pasted Graphic 1.tiff \width17140 \height6340
}¬}\pard\pardeftab720\ri-10257\pardirnatural\qj

\f2\fs22 \cf6 \CocoaLigature0 \
\pard\pardeftab529\ri-10257\pardirnatural\qj
\cf6 \
\
\
\
\
\pard\pardeftab720\ri-10257\sl360\slmult1\qj

\f0\b\fs40 \cf0 \expnd0\expndtw0\kerning0
\ul \ulc0 \CocoaLigature1 Open Source External Libraries
\fs36 \ulnone \

\b0\fs32 \expnd0\expndtw0\kerning0
Our iOS application uses some of Open Source libraries. Details of those libraries are provided below:
\b\fs36 \expnd0\expndtw0\kerning0
\

\f2\b0\fs22 \cf6 \kerning1\expnd0\expndtw0 \CocoaLigature0 \
\pard\pardeftab529\ri-10257\pardirnatural\qj
\cf6 \
\
\pard\pardeftab720\ri-10257\pardirnatural\qj

\f1\fs24 \cf0 \CocoaLigature1 {{\NeXTGraphic Pasted Graphic.tiff \width17140 \height6340
}¬}\pard\pardeftab720\ri-10257\pardirnatural\qj

\f0\b\fs32 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\ri-10257\sl360\slmult1\qj

\fs36 \cf2 \
\
\pard\pardeftab720\ri-10257\sl360\slmult1\qj
\cf0 \expnd0\expndtw0\kerning0
SwiftyJSON Library\
\pard\pardeftab720\ri-10257\sl512\qj

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
SwiftyJSON makes it easy to deal with JSON data in Swift.
\fs24 \cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\ri-10257\sl360\slmult1\qj

\b\fs36 \cf2 \expnd0\expndtw0\kerning0
\
KeyChainsWrapper Library
\fs32 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\ri-10257\sl360\slmult1\qj

\b0 \cf2 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\ri-10257\sl360\slmult1\qj
\cf0 \expnd0\expndtw0\kerning0
This is an open source library for storing data at persistent place on device. Our application is using this library for storing user user,s login credentials, example: Authentication Token, username and password. Keychains are safe place to store such information. This API helps to retrieve data when application is re launched after termination. Thus, user will not have to login every time.\
\
\pard\pardeftab720\ri-10257\pardirnatural\qj

\f1\fs24 \cf0 \kerning1\expnd0\expndtw0 {{\NeXTGraphic Screen Shot 2015-12-27 at 4.31.42 am.png \width13400 \height11060
}¬}\pard\pardeftab720\ri-10257\pardirnatural\qj

\f0\fs32 \cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\ri-10257\sl360\slmult1\qj
\cf0 \expnd0\expndtw0\kerning0
\
\

\b\fs36 \expnd0\expndtw0\kerning0
Alamofire Library\
\pard\pardeftab720\ri-10257\sl512\qj

\b0\fs32 \cf2 \expnd0\expndtw0\kerning0
Alamofire is an HTTP networking library written in Swift. Our application uses this library for making any network requests from Cloudkibo Server. All REST API requests use this library for GET or POST requests from server.
\fs36 \cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\ri-10257\sl360\slmult1\qj

\b \cf0 \expnd0\expndtw0\kerning0
\
WebRTC Library\

\b0 \expnd0\expndtw0\kerning0
Our iOS application uses a WebRTC library nam
\fs32 ed \'93
\f3 \expnd0\expndtw0\kerning0
libjingle_peerconnection\expnd0\expndtw0\kerning0
\'94.
\f0 \cf2 \expnd0\expndtw0\kerning0
The code that implements WebRTC native APIs (including the Stream and the PeerConnection APIs) are available in this library.
\b\fs36 \cf0 \expnd0\expndtw0\kerning0
\
\
SQLite Library
\b0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\ri-10257\sl512\sa320\qj

\fs32 \cf2 \expnd0\expndtw0\kerning0
This is a type-safe, \cf0 \expnd0\expndtw0\kerning0
Swift\cf2 \expnd0\expndtw0\kerning0
-language layer over \cf0 \expnd0\expndtw0\kerning0
SQLite3\cf2 \expnd0\expndtw0\kerning0
. \cf0 \expnd0\expndtw0\kerning0
SQLite.swift\cf2 \expnd0\expndtw0\kerning0
 provides compile-time confidence in SQL statement syntax 
\i \expnd0\expndtw0\kerning0
and
\i0 \expnd0\expndtw0\kerning0
 intent. Our application uses this API for creating database connection, creating tables, adding and retireving data from SQLite database.\
\pard\pardeftab720\ri-10257\sl360\slmult1\qj

\fs36 \cf0 \expnd0\expndtw0\kerning0
\
\

\b \expnd0\expndtw0\kerning0
\

\b0\fs32 \expnd0\expndtw0\kerning0
\
}